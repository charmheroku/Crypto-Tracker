{"version":3,"sources":["api.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","Chart","coinId","isDark","useQuery","endDate","Math","floor","Date","now","startDate","console","log","fetchCoinHistory","isLoading","data","type","series","map","price","x","time_open","y","open","high","low","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","xaxis","labels","format","axisTicks","axisBorder","tooltip","enabled","yaxis","plotOptions","candlestick","colors","upward","downward","custom","dataPointIndex","w","config","date","toLocaleDateString","month","day","toFixed","left","Container","styled","div","List","props","textColor","Price","fetchCoinToday","todayObjData","displayKey","displayEmoji","priceData","index","Title","h1","accentColor","Loader","span","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","history","useHistory","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","refetchInterval","tickersLoading","tickersData","loading","Helmet","name","Button","onClick","push","variant","startIcon","rank","symbol","quotes","USD","description","total_supply","max_supply","to","path","CoinsList","ul","li","cardBgColor","Img","img","Coins","slice","coin","pathname","id","src","toLowerCase","Router","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","ContainerEmoji","Emoji","App","useState","setIsDark","Switch","onChange","current","inputProps","sx","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.5642a940.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7;\r\n  console.log(startDate, endDate)\r\n  return fetch(\r\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n  ).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinToday(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/today`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\ninterface ChartProps {\r\n  coinId: string;\r\n  isDark: any;\r\n}\r\nfunction Chart({ coinId, isDark }: ChartProps) {\r\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\r\n    fetchCoinHistory(coinId)\r\n  );\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <ApexChart\r\n          type=\"candlestick\"\r\n          series={[\r\n            {\r\n              data: data?.map((price) => {\r\n                return {\r\n                  x: price.time_open,\r\n                  y: [price.open, price.high, price.low, price.close],\r\n                };\r\n              }),\r\n            },\r\n          ]}\r\n          options={{\r\n            theme: {\r\n              mode: isDark ? \"dark\" : \"light\",\r\n            },\r\n            chart: {\r\n              height: 500,\r\n              width: 500,\r\n              toolbar: {\r\n                show: false,\r\n              },\r\n              background: \"transparent\",\r\n            },\r\n            grid: {\r\n              show: false,\r\n            },\r\n            stroke: {\r\n              curve: \"smooth\",\r\n              width: 3,\r\n            },\r\n            xaxis: {\r\n              type: \"datetime\",\r\n              labels: {\r\n                show: false,\r\n                format: \"M/dd\",\r\n              },\r\n              axisTicks: {\r\n                show: false,\r\n              },\r\n              axisBorder: {\r\n                show: false,\r\n              },\r\n              tooltip: {\r\n                enabled: false,\r\n              },\r\n            },\r\n            yaxis: {\r\n              labels: {\r\n                show: false,\r\n              },\r\n            },\r\n            plotOptions: {\r\n              candlestick: {\r\n                colors: {\r\n                  upward: \"#FF6363\",\r\n                  downward: \"#219F94\",\r\n                },\r\n              },\r\n            },\r\n            tooltip: {\r\n              custom: ({ dataPointIndex, w }) => {\r\n                const data = w.config.series[0].data[dataPointIndex];\r\n                const date = new Date(data.x).toLocaleDateString(\"ko-KR\", {\r\n                  month: \"numeric\",\r\n                  day: \"numeric\",\r\n                });\r\n                const open = data.y[0].toFixed(2);\r\n                const high = data.y[1].toFixed(2);\r\n                const left = data.y[2].toFixed(2);\r\n                const close = data.y[3].toFixed(2);\r\n\r\n                return `\r\n                <div class=\"apexcharts-tooltip-title\">${date}</div>\r\n                <div class=\"apexcharts-tooltip-box apexcharts-tooltip-candlestick\">\r\n                  <div>Open: <span>${open}</span></div>\r\n                  <div>High: <span>${high}</span></div>\r\n                  <div>Left: <span>${left}</span></div>\r\n                  <div>Close: <span>${close}</span></div>\r\n                </div>`;\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinToday } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template:\r\n    \"a a\"\r\n    \"a a\";\r\n`;\r\n\r\nconst List = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 2px solid ${(props) => props.theme.textColor};\r\n  border-radius: 20% / 50%;\r\n  padding: 10px;\r\n  margin: 20px;\r\n  & span:nth-child(2) {\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\ninterface PriceProps {\r\n  coinId: string;\r\n}\r\n\r\ninterface ITodayPrice {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\nfunction Price({ coinId }: PriceProps) {\r\n  const { isLoading, data } = useQuery<ITodayPrice[]>([\"today\", coinId], () =>\r\n    fetchCoinToday(coinId)\r\n  );\r\n  const todayObjData: any = data ? data[0] : {};\r\n  const displayKey = [\"open\", \"close\", \"low\", \"high\"];\r\n  const displayEmoji = [\"✔\", \"🔒\", \"📉\", \"📈\"];\r\n  const priceData = displayKey.map((data) => todayObjData[data]);\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <>\r\n          <Container>\r\n            {displayKey.map((data, index) => {\r\n              return (\r\n                <List key={index}>\r\n                  <span>\r\n                    {displayEmoji[index]}\r\n                    {data}\r\n                  </span>\r\n                  <span>${priceData[index].toFixed(2)}</span>\r\n                </List>\r\n              );\r\n            })}\r\n          </Container>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Price;\r\n","import { useQuery } from \"react-query\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  useParams,\r\n  useRouteMatch,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\nimport { Button } from \"@mui/material\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n  margin-left: 30px;\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 33%;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    padding: 7px 0px;\r\n    display: block;\r\n  }\r\n`;\r\n\r\ninterface RouteParams {\r\n  coinId: string;\r\n}\r\ninterface RouteState {\r\n  name: string;\r\n}\r\ninterface InfoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Coin({isDark}:any) {\r\n  const { coinId } = useParams<RouteParams>();\r\n  const { state } = useLocation<RouteState>();\r\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\r\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\r\n  const history = useHistory();\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\r\n    [\"info\", coinId],\r\n    () => fetchCoinInfo(coinId)\r\n  );\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    [\"tickers\", coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  const loading = infoLoading || tickersLoading;\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          history.push(\"/\");\r\n        }}\r\n        variant=\"outlined\"\r\n        startIcon={<ArrowBackIcon />}\r\n      >\r\n        Go Back\r\n      </Button>\r\n      <Header>\r\n        <Title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </Title>\r\n      </Header>\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Rank:</span>\r\n              <span>{infoData?.rank}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Symbol:</span>\r\n              <span>${infoData?.symbol}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Price:</span>\r\n              <span>{tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Description>{infoData?.description}</Description>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Total Suply:</span>\r\n              <span>{tickersData?.total_supply}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Max Supply:</span>\r\n              <span>{tickersData?.max_supply}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n\r\n          <Tabs>\r\n            <Tab isActive={chartMatch !== null}>\r\n              <Link to={`/${coinId}/chart`}>Chart</Link>\r\n            </Tab>\r\n            <Tab isActive={priceMatch !== null}>\r\n              <Link to={`/${coinId}/price`}>Price</Link>\r\n            </Tab>\r\n          </Tabs>\r\n\r\n          <Switch>\r\n            <Route path={`/:coinId/price`}>\r\n              <Price coinId={coinId} />\r\n            </Route>\r\n            <Route path={`/:coinId/chart`}>\r\n              <Chart isDark={isDark} coinId={coinId} />\r\n            </Route>\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coin;\r\n","import Switch from \"@mui/material/Switch\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoins } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  color: ${(props) => props.theme.textColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid white;\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-in;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface ICoin {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\n// export type QueryStatus = 'idle' | 'loading' | 'error' | 'success'\r\n\r\n// export interface QueryObserverBaseResult<TData = unknown, TError = unknown> {\r\n//   data: TData | undefined\r\n//   dataUpdatedAt: number\r\n//   error: TError | null\r\n//   errorUpdatedAt: number\r\n//   failureCount: number\r\n//   isError: boolean\r\n//   isFetched: boolean\r\n//   isFetchedAfterMount: boolean\r\n//   isFetching: boolean\r\n//   isIdle: boolean\r\n//   isLoading: boolean\r\n//   isLoadingError: boolean\r\n//   isPlaceholderData: boolean\r\n//   isPreviousData: boolean\r\n//   isRefetchError: boolean\r\n//   isStale: boolean\r\n//   isSuccess: boolean\r\n//   refetch: (\r\n//     options?: RefetchOptions\r\n//   ) => Promise<QueryObserverResult<TData, TError>>\r\n//   remove: () => void\r\n//   status: QueryStatus\r\n// }\r\n\r\nfunction Coins() {\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      \r\n      <Header>\r\n        <Title>CryptoTracker</Title>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/${coin.id}`,\r\n                  state: { name: coin.name },\r\n                }}\r\n              >\r\n                <Img\r\n                  src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\r\n                />\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coins;\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router({isDark}:any) {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/crypto-tracker/:coinId\">\r\n          <Coin isDark={isDark} />\r\n        </Route>\r\n        <Route path=\"/crypto-tracker\">\r\n          <Coins />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  cardBgColor: \"transparent\",\r\n  accentColor: \"#9c88ff\",\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"whitesmoke\",\r\n  textColor: \"black\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"white\",\r\n};\r\n","import styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport Router from \"./Router\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\nimport { useState } from \"react\";\r\nimport { Switch, Button } from \"@mui/material\";\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nconst ContainerEmoji = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Emoji = styled.div`\r\n  height: 24px;\r\n  font-size: 1.5em;\r\n`;\r\n\r\nfunction App() {\r\n  const [isDark, setIsDark] = useState(false);\r\n  const toggleDark = () => setIsDark((current) => !current);\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\r\n        <ContainerEmoji>\r\n          <Emoji>🌞</Emoji>\r\n          <Switch\r\n            onChange={toggleDark}\r\n            inputProps={{ \"aria-label\": \"controlled\" }}\r\n            sx={{}}\r\n          />\r\n          <Emoji>🌚</Emoji>\r\n         \r\n        </ContainerEmoji>\r\n\r\n        <GlobalStyle />\r\n        <Router isDark={isDark}/>\r\n        <ReactQueryDevtools initialIsOpen={true} />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport App from \"./App\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}